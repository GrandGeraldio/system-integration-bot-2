"""Модуль для реализации функции бота для получения случайных картинок уток."""

import logging
from typing import List
import requests
import telebot
from telebot import types
from bot_func_abc import AtomicBotFunctionABC


class AtomicRandomDuckBotFunction(AtomicBotFunctionABC):
    """Реализация функции бота для получения случайных картинок уток."""

    commands: List[str] = ["randomduck", "multiduck", "ducktype"]
    authors: List[str] = ["GrandGeraldio"]
    about: str = "Генератор картинок уток!"
    description: str = """Команды:
    /randomduck - случайное изображение утки.
    /multiduck <число> - несколько случайных изображений (1-3).
    /ducktype <расширение> - изображение с указанным расширением (gif, jpg, jpeg, png).
    """
    state: bool = True

    bot: telebot.TeleBot

    def set_handlers(self, bot: telebot.TeleBot):
        """Set message handlers"""
        self.bot = bot

        @self.bot.message_handler(commands=["randomduck"])
        def handle_random_duck(message: types.Message):
            self.random_duck_message_handler(message)

        @self.bot.message_handler(commands=["multiduck"])
        def handle_multi_duck(message: types.Message):
            self.multi_duck_message_handler(message)

        @self.bot.message_handler(commands=["ducktype"])
        def handle_duck_type(message: types.Message):
            self.duck_type_message_handler(message)

    def random_duck_message_handler(self, message: types.Message):
        """Handler for /randomduck command to send a single random duck image."""
        image = self.__get_random_duck_images(count=1)
        if image:
            self.bot.send_photo(chat_id=message.chat.id, photo=image[0])
        else:
            self.bot.send_message(chat_id=message.chat.id, text="Не удалось получить изображение. Попробуйте снова!")

    def multi_duck_message_handler(self, message: types.Message):
        """Handler for /multiduck command to send multiple random duck images."""
        try:
            count = int(message.text.split()[1])
            if count < 1 or count > 3:
                self.bot.send_message(chat_id=message.chat.id, text="Введите число от 1 до 3!")
                return
        except (IndexError, ValueError):
            self.bot.send_message(chat_id=message.chat.id, text="Использование: /multiduck <число от 1 до 3>")
            return

        images = self.__get_random_duck_images(count=count)
        if not images:
            self.bot.send_message(chat_id=message.chat.id, text="Не удалось получить изображения. Попробуйте снова!")
            return
        for img in images:
            self.bot.send_photo(chat_id=message.chat.id, photo=img)

    def duck_type_message_handler(self, message: types.Message):
        """Handler for /ducktype command to send a duck image with specific extension."""
        try:
            extension = message.text.split()[1].lower()
            if extension not in ('gif', 'jpg', 'jpeg', 'png'):
                self.bot.send_message(chat_id=message.chat.id, text="Поддерживаемые расширения: gif, jpg, jpeg, png")
                return
        except IndexError:
            self.bot.send_message(chat_id=message.chat.id, text="Использование: /ducktype <gif|jpg|jpeg|png>")
            return

        image = self.__get_random_duck_images(count=1, extension=extension)
        if image:
            self.bot.send_photo(chat_id=message.chat.id, photo=image[0])
        else:
            self.bot.send_message(chat_id=message.chat.id, text=f"Не удалось найти изображение с расширением .{extension}. Попробуйте снова!")

    def __get_random_duck_images(self, count=1, extension=None):
        """Fetches a given number of random duck images from Random Duck API."""
        images = []
        attempts = 0
        max_attempts = count * 3  # Увеличим количество попыток для надежности
        while len(images) < count and attempts < max_attempts:
            try:
                response = requests.get("https://random-d.uk/api/v2/random", timeout=5)
                response.raise_for_status()
                img_url = response.json().get("url")
                if not isinstance(img_url, str):
                    attempts += 1
                    continue
                if extension and not img_url.lower().endswith(f".{extension}"):
                    attempts += 1
                    continue
                if img_url and img_url not in images:  # Избегаем дубликатов
                    images.append(img_url)
                attempts += 1
            except (requests.exceptions.RequestException, ValueError) as ex:
                logging.exception(ex)
                attempts += 1
        return images
